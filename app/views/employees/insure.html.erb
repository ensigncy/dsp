<html>
<head></head>
<body>
<div id="querys-insure"></div>
<div id="insure-data"></div>
<%= company_for %>
<script type="text/javascript" charset="utf-8">
	Ext.onReady(function(){
		
	var formHeight = 120;
	var controller_name = "社保管理";
	var selectedRecordId = undefined;
	
		var form = new Ext.FormPanel({
			title:'查询',
			width:'100%',
			renderTo:'querys-insure',
			height:formHeight ,
	//		collapsible :true ,
			labelWidth : 65,
	        labelAlign : "right",
		 	bodyStyle: 'padding: 5px',//		bodyStyle:'padding:5px 5px 0',
	        defaults: {
	            anchor: '0'
	        } ,
			keys : [{
				 key: Ext.EventObject.ENTER,fn:search,scope:this
			}] ,
			items: [
				{
					layout:'column',
					border:false,
					items:[ 
						{
							layout:"form",border:false,
							items : [{
								columnWidth:.5 , fieldLabel:'姓名',  name:'empname' ,width:200,xtype:"textfield"
							}
							, 
								{
									columnWidth:.5 , fieldLabel:'代理方式',  name:'c_method',width:200,xtype:"textfield"
								} ,	new Ext.form.ComboBox({
										fieldLabel:'社保状态',hiddenName:'is_insure' ,
										typeAhead:true,triggerAction:'all',
										lazyRender:true,mode:'local',selectOnFocus:true,
										editable :false,emptyText:'请选择...',
										listeners:{
											select : function(combo ,record , index){
												search();
											}
										},
										store:new Ext.data.ArrayStore({
											 fields:[
											'is_insure',
											'is_insure_name'
											],
											data:TAGS_ALL.concat(STATUS)
										}),
										valueField:'is_insure', 
										displayField:'is_insure_name'
									}) 
							]
						}
					 ,{		layout:'form',border:false,
							items:[	new Ext.form.ComboBox({
									fieldLabel:'公司名称',hiddenName:'company' , allowBlank:false,
									typeAhead:true,triggerAction:'all',emptyText:'请选择...',
									lazyRender:true,mode:'local',selectOnFocus:true,
									editable :false,listeners:{
										select : function(combo ,record , index){
											search();
										}
									},
									store:new Ext.data.ArrayStore({
										 fields:[
										'company',
										'company_name'
										],
										data:TAGS_ALL.concat(COM)
									}),
									valueField:'company', 
									displayField:'company_name'
								})
								, 	new Ext.form.ComboBox({
										fieldLabel:'户口性质',hiddenName:'hukou' ,
										typeAhead:true,triggerAction:'all',
										lazyRender:true,mode:'local',selectOnFocus:true,
										editable :false,emptyText:'请选择...',
										listeners:{
											select : function(combo ,record , index){
												search();
											}
										},
										store:new Ext.data.ArrayStore({
											 fields:[
											'hukou',
											'hukou_name'
											],
											data:TAGS_ALL.concat(HUKOU)
										}),
										valueField:'hukou', 
										displayField:'hukou_name'
									})  ,
								new Ext.form.ComboBox({
									fieldLabel:'公积金状态',hiddenName:'is_provident' ,
									typeAhead:true,triggerAction:'all',
									lazyRender:true,mode:'local',selectOnFocus:true,
									editable :false,emptyText:'请选择...',
									listeners:{
										select : function(combo ,record , index){
											search();
										}
									},
									store:new Ext.data.ArrayStore({
										 fields:[
										'is_provident',
										'is_provident_name'
										],
										data:TAGS_ALL.concat(STATUS)
									}),
									valueField:'is_provident', 
									displayField:'is_provident_name'
								}) 
							]
					 }]
				}]
		});
			
	var sm = new Ext.grid.CheckboxSelectionModel();
	var colModel = [
		new Ext.grid.RowNumberer(),sm,
		 {  dataIndex: 'id',hidden:true}
		,{  dataIndex: 'company',header: '公司', width:100 ,renderer:function(value){
			for (var i in COM){
				company = COM[i];
				if(value == company[0]) return company[1];
			}
		}}
		,{  dataIndex: 'empname',header:'姓名',width:50 } 
		,{  dataIndex: 'sex',header:'性别', width:30,renderer:function(value){
				for(var i in SEX){
					sex = SEX[i];
					if (value == sex[0]) return sex[1];
				}
				return value;
			} 
		}
		,{  dataIndex: 'is_insure',header:'社保状态' ,width:50, renderer:function(value){
			var color = (value == 1 ? 'green': (value == 2 ? "red":''));
			for(var i= 0 ; i < STATUS.length ; i++){
				_status = STATUS[i];
				if(value == _status[0]) {
					return "<font color="+color+">"+_status[1]+"</font>";
				}
			}
		}}
		,{  dataIndex: 'insure_base',header:'社保基数',width:50}
		,{  dataIndex: 'bargain_begin',header:'合同开始日期', width:50 }
		,{  dataIndex: 'bargain_end',header:'合同结束日期', width:50 }
		,{  dataIndex: 'hukou',header:'户口' , width:40, renderer:function(value){
			for(var i in HUKOU){
				_status = HUKOU[i];
				if(value == _status[0]) return _status[1];
			}
			return value;
		} }							
	];
	var store = new Ext.data.JsonStore({
	        // store configs
	        autoDestroy: true,
			baseParams: {<%= "#{ request_forgery_protection_token }: '#{ form_authenticity_token }' "%>},
	        url: '/employees/grid.json',
	        remoteSort: false,
	        sortInfo: {
	            field: 'company',
	            direction: 'ASC'
	        },
	        storeId: 'myStore',

	        // reader configs
	        idProperty: 'id',
	        root: 'data',
	        totalProperty: 'total',
	        fields: [
			{  name: 'id'}, {  name: 'company'}, {name: 'empname'}, { name: 'sex'}, 
			{  name: 'is_insure'}, { name: 'insure_base'},
			{  name: 'bargain_begin' }, {name:'bargain_end' }, {name:'hukou'}
			]
	    });
	
		var addFormPanel = new Ext.form.FormPanel({
 			bodyStyle:'padding:5px 5px 0',
			defaultType:'textfield' , labelAlign:'right',lableWidth:70,frame:false,
			baseParams: {<%= "#{ request_forgery_protection_token }: '#{ form_authenticity_token }' "%>},
			items:[
			{
				fieldLabel:'姓名',name:'employee[empname]' ,allowBlank:false,anchor:'75%',width:50
			}, new Ext.form.ComboBox({
				fieldLabel:'公司名称',hiddenName:'employee[company]' , allowBlank:false,
				typeAhead:true,triggerAction:'all',
				lazyRender:true,mode:'local',selectOnFocus:true,
				editable :false,
				store:new Ext.data.ArrayStore({
					 fields:[
					'employee[company]',
					'company_name'
					],
					data:COM
				}),
				valueField:'employee[company]', 
				displayField:'company_name'
			}),{
				fieldLabel:'身份证',name:'employee[empidn]',allowBlank:false,anchor:'75%'
			}	, new Ext.form.ComboBox({
				fieldLabel:'性别',hiddenName:'employee[sex]' , allowBlank:false,
				typeAhead:true,triggerAction:'all',
				lazyRender:true,mode:'local',selectOnFocus:true,
				editable:false,
				store:new Ext.data.ArrayStore({
					fields:['employee[sex]','sex_name'],
					data:SEX
				}) , valueField:'employee[sex]',displayField:'sex_name'
			})	,{
				fieldLabel:'职位',name:'employee[job]', allowBlank:false,anchor:'75%'
			} 	,{
				fieldLabel:'代理方式',name:'employee[c_method]',allowBlank:false,anchor:'75%',width:50
			}	,
			 {
				fieldLabel:'合同开始日期',name:'employee[bargain_begin]',
				allowBlank:false,format:'Y-m-d',xtype:'datefield'
			}	,{
				fieldLabel:'合同结束日期',name:'employee[bargain_end]',allowBlank:false,xtype:'datefield'
				,format:'Y-m-d'
			}	, new Ext.form.ComboBox({
				hiddenName:'employee[hukou]',
				fieldLabel:'户口性质',allowBlank:false,
				typeAhead:true,triggerAction:'all',
				lazyRender:true,mode:'local',selectOnFocus:true,
				editable :false,
				store:new Ext.data.ArrayStore({
					 fields:[
					'employee[hukou]',
					'hukou_name'
					],
					data:HUKOU
				}),
				valueField:'employee[hukou]', 
				displayField:'hukou_name'
			})  ,{
				fieldLabel:'联系电话',name:'employee[telphone]',allowBlank:false,anchor:'75%'
			}	,{
				fieldLabel:'社保卡号',name:'employee[insure_card]',allowBlank:false,anchor:'75%'
			} 	,
				{
					fieldLabel:'失业卡号',name:'employee[lose_card]',allowBlank:false,anchor:'75%'
				},	{
					fieldLabel:'民族',name:'employee[national]',allowBlank:false,anchor:'75%'
			}	,	{
						fieldLabel:'何时参加工作',name:'employee[job_begin]',allowBlank:false,xtype:'datefield',
						format:'Y-m-d'
			}	, new Ext.form.ComboBox({
				fieldLabel:'学历',hiddenName:'employee[education]',allowBlank:false,
					typeAhead:true,triggerAction:'all',
					lazyRender:true,mode:'local',selectOnFocus:true,
					editable :false,
					store:new Ext.data.ArrayStore({
						 fields:[
						'employee[education]',
						'education_name'
						],
						data:EDU
					}),
					valueField:'employee[education]', 
					displayField:'education_name'
			})	,{
				name:'employee[id]', hidden :true   //主键值 隐藏 
			}]
		});
	
		var grid = new Ext.grid.GridPanel({ //EditorGridPanel({
	        store: store,
			frame:true,
			title:'员工社保信息',
			renderTo: 'insure-data',
			width:'100%',
			height:Ext.getCmp('dsp-body').getActiveTab().getInnerHeight()- formHeight,
			monitorResize: true,
			autoScroll:true,
			//clicksToEdit:1 ,
	        colModel: new Ext.grid.ColumnModel({
	            columns: colModel ,
	            defaults: {
	                sortable: true
	            }
	        }),
			sm : sm,
	        loadMask: true,
	        plugins: [ new Ext.ux.PanelResizer({
		            minHeight: 100
		        })],
			stripeRows: true,
	       // autoExpandColumn: 'company',
			listeners: {
	            render: {
	                fn: function(){
	                   	loadData();
	                }
	            }
	        },
	        viewConfig: {  
			                 forceFit: true,  
			                 enableRowBody: true,  
			                 showPreview: true 
			} ,
			bbar: new Ext.PagingToolbar({
	            store: store,
	            pageSize: 20,
				displayInfo: true,
				displayMsg: '显示第 {0} 条到 {1} 条记录，共 {2} 条' ,
				plugins: [new Ext.ux.ProgressBarPager()]
	        })	 ,
				tbar:[
					{ text: '加保' , iconCls:'add-icon'  , handler:function(){
						create();
					}
					},'-',
					{ text: '退保' , iconCls:'dele-icon' , handler:function(){
						dele();
					}
					}
				]  
	    });
	// edit row-data
	grid.on('rowdblclick' , function(grid,rowIndex,event){
		 edit();
	});
	
	var addCompanyWindow = new Ext.Window({
		layout:'fit',width:400 , height: 500 ,resizable:false,draggable:true,
		closable:true,modal:true, closeAction:'hide',
		collapsible:true, maximizable:false, buttonAlign:'right',
		border:false,animCollapse:true,
		items:[addFormPanel],
		buttons:[
		{
			text:'保存', iconCls:'save-icon',
			handler:function(){
				save();
			}
		},{
			text:'关闭',iconCls:'close-icon',
			handler:function(){
				addCompanyWindow.hide();
			}
		}]
	});
	
	function create(){
		selectedRecordId = undefined;
		addFormPanel.form.reset();
		addCompanyWindow.setTitle("新增"+controller_name);
		addCompanyWindow.show();
	}
	
	function save(){
		if (!addFormPanel.form.isValid()){
			return ;
		}
		var url = 'employees'
		var submitOptions = {
			url : url,
			method : "POST",
			params: { format: 'json' },
			waitMsg:'正在处理数据,请稍候...',
			success:function(form,action){
				addCompanyWindow.hide();
				store.reload();
				form.reset();
			},
			failure:function(form,action){
				var errorss = action.result.msg;
				for(var e in errorss) {
					alert(e + " -- > "+ errorss[e]);
				}
				//Ext.MessageBox.alert("提示",msg);
			}
		} ;
		if (selectedRecordId) {
			submitOptions.url  = 'employees/'+selectedRecordId;
			submitOptions.params._method = 'PUT';
		}
		addFormPanel.form.submit(submitOptions);
	}
	
	function edit(){
		var record = grid.getSelectionModel().getSelected();
		if (Ext.isEmpty(record)){
			Ext.MessageBox.alert("提示","请选择要修改的记录!");
			return ;
		}
		//addFormPanel.getForm().loadRecord(record);
		addFormPanel.getForm().load({
			url:'/employees/'+record.get('id')+'/edit?format=json',
			method:'GET' 
		});
		selectedRecordId = record.get('id');
		addCompanyWindow.setTitle("修改"+controller_name);		
		addCompanyWindow.show();
	}
	
	function dele(){
		var record = grid.getSelectionModel().getSelections();
		if (Ext.isEmpty(record)) {
			Ext.MessageBox.alert("提示","请选择要删除的记录");
			return ;
		}
		var dlist = new Array();
		for (var i = 0 ; i < record.length ; i++){
			dlist.push(record[i].data.id);
		}
		Ext.Ajax.request({
			url: 'employees/delete',
			method:'POST',
			params:{ 
				format: 'json',
				'dlist[]': dlist 
				<%= " , #{ request_forgery_protection_token }: '#{ form_authenticity_token }' "%>	
			 } ,
			success:function(response, opts){
				//alert(Ext.decode(response.responseText).msg);
				loadData();
			}, 
			faild:function(response, opts){
				alert(Ext.decode(response.responseText).msg);
			}
		});
	}
	
	function search(){
		var formParams = form.getForm().getValues();
		formParams = Ext.util.JSON.encode(formParams);
		//alert(formParams);
		loadData(formParams);
	}
	
	function loadData(formParams){
		 store.load({
			params: {
				start:0 , limit:20, query:[formParams]
			}
		})
	}
});
</script>
</body>
</html>